---
layout:     keynote
title:      "Javascript中函数的柯里化"
navcolor:   "invert"
date:       2017-3-21
author:     "Mill"
tags:
    - 前端开发
    - JavaScript
---
#### 什么是柯里化
<br>
先用一个简单的例子来引出
```javascript
var add=function(a,b,c){
    return a+b+c;
}
```
需要写一个函数，满足```curry(add)(1)(2)(3)```输出结果为6。
由此可以看出curry 函数的功能：每传递一个参数调用函数，就返回一个新函数处理剩余的参数
<br>
#### 柯里的实现
```javascript
var curry = function(fn){
    if(typeof fn!=='function'){
        throw Error('No function provided');
    }

    var slice = [].slice;
    return function curriedFn(){
      var args = slice.call(arguments);
      if(args.length < fn.length){
        return function() {
            return curriedFn.apply(this, args.concat(slice.call(arguments)));
        }
      }

      return fn.apply(null, args);
    };
};
curry(add)(100)(200)(300)
```
第一次调用curry时会返回闭包函数，这个函数记住了add函数的参数个数3，当100传入时，它并没有满足add函数的参数个数，会继续返回一个拥有新参数的闭包函数，直到达到参数个数要求，才去执行这个fn。